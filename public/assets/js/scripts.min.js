(function ($) {

    $.fn.submited = function (event, before = null, success = null, complete = null, error = null) {
        event.preventDefault();

        let form = $(this);
        let data = new FormData(form[0]);
        let action = form.attr("action");
        let submitter = $(event.originalEvent.submitter);

        $.ajax({
            type: "POST",
            url: action,
            data: data,
            dataType: "json",
            contentType: false,
            processData: false,
            timeout: 20000,

            beforeSend: function () {
                addLoadingMode(submitter);
                addBackdrop("formSubmitBkdp", "absolute", form.parent());

                if (before) before();
            },

            success: function (response) {
                if (response.reload) {
                    window.location.reload();
                    return;
                }

                if (response.redirect) {
                    window.location.href = response.redirect;
                    return;
                }

                if (success) success(response);
            },

            complete: function (response) {
                removeLoadingMode(submitter);
                removeBackdrop("formSubmitBkdp");

                if (complete) complete(response);
            },

            error: function (response) {
                if (error) error(response);
            }
        });
    };


    /**
     *
     * FUNÇÕES: BACKDROP
     *
     */

    /**
     * @param {String} id id para o backdrop
     * @param {String} position tipo de posicionamento. Padrão é 'absolute'
     * @param {jQuery} container onde inserir o backdrop.
     * @param {String} effect efeito do jquery-ui. Padrão é 'fade'
     */
    function addBackdrop(id, position, container, effect) {
        let cntnr = container ?? $("body");
        let efct = effect ?? "fade";
        let bkdrop = $(`<div class="mbackdrop loading rounded" id="${id}"></div>`).css({
            "background-color": "rgb(0, 0, 0, 0.125)",
            width: "100%",
            height: "100%",
            position: position ?? "absolute",
            top: 0,
            left: 0,
            "z-index": 998,
        }).hide();

        cntnr.append(bkdrop.show(efct));
    }

    /**
     * @param {String} id id do backdrop a ser removido
     * @param {String} container local onde procurar o backdrop. Por padrão busca por todo o 'body'
     * @param {String} effect efeito do jquery-ui. Padrão é 'fade'
     */
    function removeBackdrop(id, container, effect) {
        let cntnr = $(container ?? "body");
        let efct = effect ?? "fade";

        cntnr.find("#" + id).hide(efct, function () {
            $(this).remove();
        });
    }

    /**
     *
     * FUNÇÕES: BOTÕES
     *
     */

    /**
     * @param {jQuery} buttonObject objeto jQuery do botão
     */
    function addLoadingMode(buttonObject) {
        buttonObject
            .removeClass(buttonObject.attr("data-active-icon"))
            .addClass(buttonObject.attr("data-alt-icon"))
            .prop("disabled", true);
    }

    /**
     * @param {jQuery} buttonObject objeto jQuery do botão
     */
    function removeLoadingMode(buttonObject) {
        buttonObject
            .addClass(buttonObject.attr("data-active-icon"))
            .removeClass(buttonObject.attr("data-alt-icon"))
            .prop("disabled", false);
    }
}(jQuery));

let timeoutHandler = null;

$(function () {
    $('[data-toggle="tooltip"]').tooltip()

    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
});

$(function () {
    let modal = $(".jsModalConfirmation");

    $(document).on("submit", ".jsFormSubmit", function (e) {
        let form = $(this);
        formSubmit(e, form);
    });

    $(".jsButtonConfirmation").on("click", function (e) {
        e.preventDefault();
        let button = $(this);

        modal.find(".jsFormSubmit").attr("action", button.attr("data-action"));
        modal.find(".confirmation-message")
            .addClass(`text-${button.attr("data-type")}`)
            .html(button.attr("data-message"));
        modal.find(".confirmation-btn")
            .addClass(`btn-${button.attr("data-type")}`);

        modal.modal();
    });

    $(modal).on("hidden.bs.modal", function (e) {
        modal.find(".message-area").html("");
        modal.find(".jsFormSubmit").attr("action", "");
        modal.find(".confirmation-message")
            .removeClass(`text-danger text-success text-info text-warning text-secondary`)
            .html("");
        modal.find(".confirmation-btn")
            .removeClass(`btn-danger btn-success btn-info btn-warning btn-secondary`);
    });

});

/**
* ALERTA/MENSAGENS
*/
$(function () {
    let messageAreas = $(".message-area");

    $.each(messageAreas, function (k, v) {
        let alert = $(v).find(".alert");

        if (alert.length) {
            showAlert(alert);
        }
    });

    $(".alert").on("close.bs.alert", function () {
        if (timeoutHandler)
            clearTimeout(timeoutHandler);
    });
});

/**
 * 
 * @param {*} e o evento
 * @param {jQuery} form formulário
 * @param {Function} before 
 * @param {Function} success 
 * @param {Function} complete 
 * @param {Function} error 
 */
function formSubmit(e, form, before = null, success = null, complete = null, error = null) {
    let messageArea = $(".message-area");

    messageArea = form.find(".message-area").length ? form.find(".message-area") : messageArea;

    form.submited(e, null, function (response) {
        // success
        if (response.message)
            addAlert($(response.message), messageArea);

        if (response.errors ?? null)
            addFormErrors(form, response.errors);

        if (success)
            success(response);
    }, function (response) {
        // complete
        if (response.responseJSON) {
            let resp = response.responseJSON;
            let errors = resp.errors ?? null;

            if (errors && (errors.message ?? null)) {
                addAlert($(errors.message[0]), messageArea);
            }

            if (errors)
                addFormErrors(form, errors);

            if (complete)
                complete(response);
        } else {
            addAlert($(`<div class="alert alert-danger text-center"><small>Sem resposta do servidor. Verifique sua coenxão ou se isso persistir entre em contato.</small></div>`), messageArea);
        }
    }, function () {
        // error

        if (error)
            error();
    });
}

/**
 * @param {jQuery} formObject
 * @param {Array} errs
 */
function addFormErrors(formObject, errs) {
    let fields = formObject.find("input, select, textarea");
    let errors = errs ?? [];

    if (!fields.length) return;

    $.each(fields, function (fieldKey, field) {
        let fieldObj = $(field);
        let fieldName = fieldObj.attr("name");

        if (errors[fieldName]) {
            let invalid = fieldObj.parent().find(".invalid-feedback");

            if (invalid.length) invalid.html(errors[fieldName]);
            else fieldObj.parent().append(`<div class="invalid-feedback">${errors[fieldName]}</div>`);

            fieldObj.addClass("is-invalid");
        } else {
            fieldObj
                .removeClass("is-invalid")
                .parent().find(".invalid-feedback").hide("fade", function () {
                    $(this).remove();
                });
        }
    });
}

/**
 *
 * FUNÇÕES: ALERTS/MESSAGES
 *
 */

/**
 * @param {jQuery} alert objeto jquery do elemento de mensagem
 * @param {jQuery|null} container objeto jquery do container de mensagem. Padrão será o primeiro .message-area encontrado
 */
function addAlert(alert, container = null) {
    let cntnr = container ?? $(".message-area");
    cntnr.html(alert);
    showAlert(alert);
}

/**
 * @param {jQuery} alert
 */
function showAlert(alert) {
    if (alert.hasClass("alert-float")) {
        alert.show("blind", function () {
            $(this).effect("bounce");
        });
    } else {
        alert.show("fade");
    }

    if (timer = alert.attr("data-timer")) {
        if (timeoutHandler)
            clearTimeout(timeoutHandler);
        runTimer(alert);
    }
}

/**
 * @param {jQuery} alert
 */
function removeAlert(alert) {
    if (alert.hasClass("alert-float")) {
        alert.effect("bounce", function () {
            $(this).hide("blind", function () {
                $(this).remove();
            });
        });
    } else {
        alert.hide("fade", function () {
            $(this).remove();
        });
    }
}

/**
 * @param {jQuery} alert
 */
function runTimer(alert) {
    timeoutHandler = setTimeout(function () {
        removeAlert(alert);
    }, timer * 1000);
}
